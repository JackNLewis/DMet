<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="namespace_d_met_1_1_point_distances" kind="namespace" language="C++">
    <compoundname>DMet::PointDistances</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespace_d_met_1_1_point_distances_1a57dc766ab02da35a2fca9bedabf044aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DMet::PointDistances::getMinkowski</definition>
        <argsstring>(mpfr_t &amp;res, vector&lt; double &gt; &amp;vector1, vector&lt; double &gt; &amp;vector2, double pvalue)</argsstring>
        <name>getMinkowski</name>
        <param>
          <type>mpfr_t &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; &amp;</type>
          <declname>vector1</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; &amp;</type>
          <declname>vector2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>pvalue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function that computes the distance between two points represented by their cartesian coordinated Uses Minkowski distance Uses precision 200 (∑|Xi−Yi|^p)^1/p</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>mpfr variable to store result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector1</parametername>
</parameternamelist>
<parameterdescription>
<para>point 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector2</parametername>
</parameternamelist>
<parameterdescription>
<para>point 2 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pvalue</parametername>
</parameternamelist>
<parameterdescription>
<para>pvalue </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jacklewis/Documents/work/year3/DMet/include/DMet/PointDistances.h" line="31" column="14" declfile="/Users/jacklewis/Documents/work/year3/DMet/include/DMet/PointDistances.h" declline="31" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespace_d_met_1_1_point_distances_1a6b1e7f1adada1d40f5119282e7c846e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DMet::PointDistances::getMinkowskiInfP</definition>
        <argsstring>(mpfr_t &amp;res, vector&lt; double &gt; &amp;vector1, vector&lt; double &gt; &amp;vector2, bool pos)</argsstring>
        <name>getMinkowskiInfP</name>
        <param>
          <type>mpfr_t &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; &amp;</type>
          <declname>vector1</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; &amp;</type>
          <declname>vector2</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the minkowski distance between two points represented by their cartesian coordinates when the p value is either +inf or -inf. This is equivalent to finding the largest distance when p is +inf or finding the smallest distance when p is -inf.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>mpfr variable to store result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector1</parametername>
</parameternamelist>
<parameterdescription>
<para>point 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector2</parametername>
</parameternamelist>
<parameterdescription>
<para>point 2 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>flag to determine if Infinity is positive or negative. For positive set to true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jacklewis/Documents/work/year3/DMet/include/DMet/PointDistances.h" line="43" column="14" declfile="/Users/jacklewis/Documents/work/year3/DMet/include/DMet/PointDistances.h" declline="43" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespace_d_met_1_1_point_distances_1ad2eefad0907dbb734ff7ca556df352ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DMet::PointDistances::getManhattan</definition>
        <argsstring>(mpfr_t &amp;res, vector&lt; double &gt; &amp;vector1, vector&lt; double &gt; &amp;vector2)</argsstring>
        <name>getManhattan</name>
        <param>
          <type>mpfr_t &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; &amp;</type>
          <declname>vector1</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; &amp;</type>
          <declname>vector2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function that computes the Manhattan distance between two points . Uses the implementation of Minkowski distance with a p value set as 1</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>mpfr variable to store result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector1</parametername>
</parameternamelist>
<parameterdescription>
<para>point 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector2</parametername>
</parameternamelist>
<parameterdescription>
<para>point 2 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jacklewis/Documents/work/year3/DMet/include/DMet/PointDistances.h" line="53" column="14" declfile="/Users/jacklewis/Documents/work/year3/DMet/include/DMet/PointDistances.h" declline="53" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespace_d_met_1_1_point_distances_1a941ec37666c3e9c6164498e8a0c9ab1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DMet::PointDistances::getEuclidean</definition>
        <argsstring>(mpfr_t &amp;res, vector&lt; double &gt; &amp;vector1, vector&lt; double &gt; &amp;vector2)</argsstring>
        <name>getEuclidean</name>
        <param>
          <type>mpfr_t &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; &amp;</type>
          <declname>vector1</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; &amp;</type>
          <declname>vector2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function that computes the Euclidean distance between 2 points represented as cartesian coordinates. Uses the implementation of Minkowski distance with a p value set as 2</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>mpfr variable to store result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector1</parametername>
</parameternamelist>
<parameterdescription>
<para>point 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector2</parametername>
</parameternamelist>
<parameterdescription>
<para>input vector 2 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jacklewis/Documents/work/year3/DMet/include/DMet/PointDistances.h" line="63" column="14" declfile="/Users/jacklewis/Documents/work/year3/DMet/include/DMet/PointDistances.h" declline="63" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespace_d_met_1_1_point_distances_1aa56b86ccff59a4b963feb50373605dc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DMet::PointDistances::getChebyshev</definition>
        <argsstring>(mpfr_t &amp;res, vector&lt; double &gt; &amp;vector1, vector&lt; double &gt; &amp;vector2)</argsstring>
        <name>getChebyshev</name>
        <param>
          <type>mpfr_t &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; &amp;</type>
          <declname>vector1</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; &amp;</type>
          <declname>vector2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function that computes the Chebyshev distance between 2 points represented as cartesian coordinates.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>mpfr variable to store result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector1</parametername>
</parameternamelist>
<parameterdescription>
<para>point 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector2</parametername>
</parameternamelist>
<parameterdescription>
<para>point 2 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jacklewis/Documents/work/year3/DMet/include/DMet/PointDistances.h" line="72" column="14" declfile="/Users/jacklewis/Documents/work/year3/DMet/include/DMet/PointDistances.h" declline="72" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespace_d_met_1_1_point_distances_1aad2f7d57b852ba3101e7e7fe617405da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DMet::PointDistances::getMinkowski</definition>
        <argsstring>(mpfr_t &amp;res, vector&lt; string &gt; &amp;vector1, vector&lt; string &gt; &amp;vector2, double pvalue)</argsstring>
        <name>getMinkowski</name>
        <param>
          <type>mpfr_t &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>vector&lt; string &gt; &amp;</type>
          <declname>vector1</declname>
        </param>
        <param>
          <type>vector&lt; string &gt; &amp;</type>
          <declname>vector2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>pvalue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function that computes the distance between two points represented by their cartesian coordinated Uses Minkowski distance Uses precision 200 (∑|Xi−Yi|^p)^1/p</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>mpfr variable to store result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector1</parametername>
</parameternamelist>
<parameterdescription>
<para>point 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector2</parametername>
</parameternamelist>
<parameterdescription>
<para>point 2 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pvalue</parametername>
</parameternamelist>
<parameterdescription>
<para>pvalue </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jacklewis/Documents/work/year3/DMet/include/DMet/PointDistances.h" line="86" column="14" declfile="/Users/jacklewis/Documents/work/year3/DMet/include/DMet/PointDistances.h" declline="86" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespace_d_met_1_1_point_distances_1a975ed9ad59552100fe3943d64de8cb23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DMet::PointDistances::getMinkowskiInfP</definition>
        <argsstring>(mpfr_t &amp;res, vector&lt; string &gt; &amp;vector1, vector&lt; string &gt; &amp;vector2, bool pos)</argsstring>
        <name>getMinkowskiInfP</name>
        <param>
          <type>mpfr_t &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>vector&lt; string &gt; &amp;</type>
          <declname>vector1</declname>
        </param>
        <param>
          <type>vector&lt; string &gt; &amp;</type>
          <declname>vector2</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the minkowski distance between two points represented by their cartesian coordinates when the p value is either +inf or -inf. This is equivalent to finding the largest distance when p is +inf or finding the smallest distance when p is -inf.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>mpfr variable to store result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector1</parametername>
</parameternamelist>
<parameterdescription>
<para>point 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector2</parametername>
</parameternamelist>
<parameterdescription>
<para>point 2 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>flag to determine if Infinity is positive or negative. For positive set to true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jacklewis/Documents/work/year3/DMet/include/DMet/PointDistances.h" line="98" column="14" declfile="/Users/jacklewis/Documents/work/year3/DMet/include/DMet/PointDistances.h" declline="98" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespace_d_met_1_1_point_distances_1aee7e6b4dd1ce836faa08ee273f6f5919" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DMet::PointDistances::getManhattan</definition>
        <argsstring>(mpfr_t &amp;res, vector&lt; string &gt; &amp;vector1, vector&lt; string &gt; &amp;vector2)</argsstring>
        <name>getManhattan</name>
        <param>
          <type>mpfr_t &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>vector&lt; string &gt; &amp;</type>
          <declname>vector1</declname>
        </param>
        <param>
          <type>vector&lt; string &gt; &amp;</type>
          <declname>vector2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function that computes the Manhattan distance between two points . Uses the implementation of Minkowski distance with a p value set as 1</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>mpfr variable to store result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector1</parametername>
</parameternamelist>
<parameterdescription>
<para>point 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector2</parametername>
</parameternamelist>
<parameterdescription>
<para>point 2 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jacklewis/Documents/work/year3/DMet/include/DMet/PointDistances.h" line="108" column="14" declfile="/Users/jacklewis/Documents/work/year3/DMet/include/DMet/PointDistances.h" declline="108" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespace_d_met_1_1_point_distances_1a3d754929133bc577ac5f283250012238" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DMet::PointDistances::getEuclidean</definition>
        <argsstring>(mpfr_t &amp;res, vector&lt; string &gt; &amp;vector1, vector&lt; string &gt; &amp;vector2)</argsstring>
        <name>getEuclidean</name>
        <param>
          <type>mpfr_t &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>vector&lt; string &gt; &amp;</type>
          <declname>vector1</declname>
        </param>
        <param>
          <type>vector&lt; string &gt; &amp;</type>
          <declname>vector2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function that computes the Euclidean distance between 2 points represented as cartesian coordinates. Uses the implementation of Minkowski distance with a p value set as 2</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>mpfr variable to store result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector1</parametername>
</parameternamelist>
<parameterdescription>
<para>point 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector2</parametername>
</parameternamelist>
<parameterdescription>
<para>input vector 2 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jacklewis/Documents/work/year3/DMet/include/DMet/PointDistances.h" line="118" column="14" declfile="/Users/jacklewis/Documents/work/year3/DMet/include/DMet/PointDistances.h" declline="118" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespace_d_met_1_1_point_distances_1a4cdc45d2b39f9205b374b53526c4c48f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DMet::PointDistances::getChebyshev</definition>
        <argsstring>(mpfr_t &amp;res, vector&lt; string &gt; &amp;vector1, vector&lt; string &gt; &amp;vector2)</argsstring>
        <name>getChebyshev</name>
        <param>
          <type>mpfr_t &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>vector&lt; string &gt; &amp;</type>
          <declname>vector1</declname>
        </param>
        <param>
          <type>vector&lt; string &gt; &amp;</type>
          <declname>vector2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function that computes the Chebyshev distance between 2 points represented as cartesian coordinates.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>mpfr variable to store result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector1</parametername>
</parameternamelist>
<parameterdescription>
<para>point 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector2</parametername>
</parameternamelist>
<parameterdescription>
<para>point 2 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jacklewis/Documents/work/year3/DMet/include/DMet/PointDistances.h" line="127" column="14" declfile="/Users/jacklewis/Documents/work/year3/DMet/include/DMet/PointDistances.h" declline="127" declcolumn="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>namespace for functions to compute point distances </para>
    </detaileddescription>
    <location file="/Users/jacklewis/Documents/work/year3/DMet/include/DMet/PointDistances.h" line="18" column="5"/>
  </compounddef>
</doxygen>
